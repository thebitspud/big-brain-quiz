{"version":3,"sources":["components/QuestionCard.tsx","scripts/fetchApi.ts","scripts/utils.ts","components/ScoreCard.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["QuestionCard","Difficulty","QuestionType","Categories","props","getBackgroundColor","answer","userAnswer","correctAnswer","className","questionNumber","totalQuestions","dangerouslySetInnerHTML","__html","question","answers","map","disabled","undefined","value","onClick","callback","style","backgroundColor","shuffleArray","target","i","length","j","Math","floor","random","fetchQuestions","amount","category","type","a","endpoint","fetch","json","data","results","correct_answer","incorrect_answers","ScoreCard","finishedQuiz","score","TOTAL_QUESTIONS","stats","totalAttempts","seeStats","highScore","timesAchieved","onStart","zeroStats","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","setScore","useCookies","cookies","setCookies","complete","setComplete","startTrivia","SCIENCE","MULTIPLE","newQuestions","e","currentTarget","correct","userAnswerObject","oldStats","newStats","max","path","maxAge","updateCookies","next","id","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CookiesProvider","document","getElementById"],"mappings":"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","file":"static/js/main.fa1606e4.chunk.js","sourcesContent":["import React from \"react\";\nimport CardProps from \"../types/CardProps\";\n\nfunction QuestionCard(props: CardProps) {\n  const getBackgroundColor = (answer: string) => {\n    if (answer === props.userAnswer?.correctAnswer) return \"palegreen\";\n    else if (answer === props.userAnswer?.answer) return \"lightcoral\";\n    else return \"white\";\n  };\n\n  // noinspection SpellCheckingInspection\n  return (\n    <div className=\"QuestionCard\">\n      <p className=\"number\">\n        Question {props.questionNumber} of {props.totalQuestions}\n      </p>\n\n      <p\n        className=\"question\"\n        dangerouslySetInnerHTML={{ __html: props.question }}\n      />\n      <div className=\"answers\">\n        {props.answers.map((answer) => (\n          <div>\n            <button\n              disabled={props.userAnswer !== undefined}\n              value={answer}\n              onClick={props.callback}\n              style={{ backgroundColor: getBackgroundColor(answer) }}\n            >\n              <span dangerouslySetInnerHTML={{ __html: answer }} />\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default QuestionCard;\n","import { shuffleArray } from \"./utils\";\n\nexport enum Difficulty {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\",\n}\n\nexport enum QuestionType {\n  MULTIPLE = \"multiple\",\n  TRUE_FALSE = \"boolean\",\n}\n\nexport enum Categories {\n  SCIENCE = 17,\n}\n\nexport type QueryQuestion = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\n\nexport type QuestionFormat = QueryQuestion & { answers: string[] };\n\nexport const fetchQuestions = async (\n  amount: number,\n  category: Categories,\n  type: QuestionType\n) => {\n  const endpoint =\n    `https://opentdb.com/api.php?` +\n    `amount=${amount}` +\n    `&category=${category}` +\n    `&type=${type}`;\n\n  const data = await (await fetch(endpoint)).json();\n  return data.results.map((question: QuestionFormat) => ({\n    ...question,\n    answers: shuffleArray([\n      question.correct_answer,\n      ...question.incorrect_answers,\n    ]),\n  }));\n};\n","export const shuffleArray = (target: any[]) => {\r\n  for (let i = target.length - 1; i > 0; i--) {\r\n    // Efficient ES6 random sort\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [target[i], target[j]] = [target[j], target[i]];\r\n  }\r\n\r\n  return target;\r\n};\r\n","import React from \"react\";\nimport { PlayerStats, TOTAL_QUESTIONS } from \"./App\";\n\ntype ScoreProps = {\n  onStart: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  seeStats: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  stats: PlayerStats;\n  finishedQuiz: boolean;\n  score: number;\n};\n\nfunction ScoreCard(props: ScoreProps) {\n  function getRating() {\n    if (props.score === 0) return \"Bottomless Pit\";\n    else if (props.score <= 2) return \"Unlucky\";\n    else if (props.score <= 4) return \"Small Brain\";\n    else if (props.score <= 7) return \"Average\";\n    else if (props.score <= 9) return \"Big Brain\";\n    else if (props.stats.totalAttempts < 8) return \"Cheater\";\n    else return \"Galaxy Brain\";\n  }\n\n  function getDescription() {\n    if (props.score === 0) return \"That was intentional, wasn't it?\";\n    else if (props.score <= 2)\n      return \"Wow, you did worse than the average random guesser!\";\n    else if (props.score <= 4)\n      return \"It's okay, not everyone can be a big brain.\";\n    else if (props.score <= 7)\n      return \"Not bad, but not that impressive either.\";\n    else if (props.score <= 9)\n      return \"Congrats, you are a certified big brain! :)\";\n    else if (props.stats.totalAttempts < 8) return \"Nice try, nerd.\";\n    else return \"You really wanted that perfect score, huh?\";\n  }\n\n  return (\n    <div className=\"score-card\">\n      {props.finishedQuiz ? (\n        <>\n          <p>\n            Score: {props.score} / {TOTAL_QUESTIONS}\n          </p>\n          <p className=\"rank\">Your Rank: {getRating()}</p>\n          <p className=\"description\">{getDescription()}</p>\n          <button className=\"stats\" onClick={props.seeStats}>\n            See Stats\n          </button>\n        </>\n      ) : (\n        <>\n          <p>\n            High Score: {props.stats.highScore} / {TOTAL_QUESTIONS}\n          </p>\n          <p>Times Achieved: {props.stats.timesAchieved}</p>\n          <p>Total Attempts: {props.stats.totalAttempts}</p>\n        </>\n      )}\n      <button className=\"start\" onClick={props.onStart}>\n        {props.finishedQuiz ? \"Try Again\" : \"Start\"}\n      </button>\n    </div>\n  );\n}\n\nexport default ScoreCard;\n","import React, { useState } from \"react\";\nimport \"../styles/App.css\";\nimport \"./QuestionCard\";\nimport QuestionCard from \"./QuestionCard\";\nimport {\n  Categories,\n  fetchQuestions,\n  QuestionFormat,\n  QuestionType,\n} from \"../scripts/fetchApi\";\nimport ScoreCard from \"./ScoreCard\";\nimport { useCookies } from \"react-cookie\";\n\nexport const TOTAL_QUESTIONS = 10;\n\nexport type UserAnswerObject = {\n  question: string;\n  answer: string;\n  correctAnswer: string;\n  correct: boolean;\n};\n\nexport type PlayerStats = {\n  highScore: number;\n  timesAchieved: number;\n  totalAttempts: number;\n};\n\nconst zeroStats: PlayerStats = {\n  highScore: 0,\n  timesAchieved: 0,\n  totalAttempts: 0,\n};\n\n/**\n * Just as a heads up, do not look at my code as an example.\n * This was a practice project that I rushed through and did not\n * bother to follow good coding practices while working on it.\n */\n\nfunction App() {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [questions, setQuestions] = useState<QuestionFormat[]>([]);\n  const [number, setNumber] = useState<number>(0);\n  const [userAnswers, setUserAnswers] = useState<UserAnswerObject[]>([]);\n  const [score, setScore] = useState<number>(0);\n  const [cookies, setCookies] = useCookies([\"stats\"]);\n  const [complete, setComplete] = useState<boolean>(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setComplete(false);\n    setScore(0);\n    setNumber(0);\n\n    const newQuestions = await fetchQuestions(\n      TOTAL_QUESTIONS,\n      Categories.SCIENCE,\n      QuestionType.MULTIPLE\n    );\n\n    setQuestions(newQuestions);\n    setUserAnswers([]);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (complete) return;\n\n    const answer = e.currentTarget.value;\n    const correctAnswer = questions[number].correct_answer;\n    const correct = answer === correctAnswer;\n    if (correct) setScore(score + 1);\n\n    const userAnswerObject = {\n      question: questions[number].question,\n      answer,\n      correctAnswer,\n      correct,\n    };\n\n    setUserAnswers([...userAnswers, userAnswerObject]);\n  };\n\n  const nextQuestion = () => {\n    const next = number + 1;\n    if (next < TOTAL_QUESTIONS) setNumber(next);\n  };\n\n  function updateCookies() {\n    const oldStats = cookies.stats ?? zeroStats;\n\n    let newStats: PlayerStats = {\n      highScore: Math.max(score, oldStats.highScore),\n      timesAchieved:\n        score > oldStats.highScore\n          ? 1\n          : oldStats.timesAchieved + (score === oldStats.highScore ? 1 : 0),\n      totalAttempts: (oldStats.totalAttempts += 1),\n    };\n\n    setCookies(\"stats\", newStats, { path: \"/\", maxAge: 157784630 });\n  }\n\n  const seeResults = () => {\n    updateCookies();\n    setComplete(true);\n  };\n\n  const resetAnswers = () => {\n    setUserAnswers([]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Big Brain Quiz &#129504;</h1>\n      <div className=\"info-card\">\n        {complete ? (\n          <ScoreCard\n            onStart={startTrivia}\n            seeStats={resetAnswers}\n            stats={cookies.stats ?? zeroStats}\n            finishedQuiz={userAnswers.length >= TOTAL_QUESTIONS}\n            score={score}\n          />\n        ) : (\n          <p className=\"score\">\n            Score: {score} / {userAnswers.length}\n          </p>\n        )}\n        {loading && <p className=\"loading\">Loading Questions...</p>}\n        {!loading && !complete && (\n          <QuestionCard\n            question={questions[number].question}\n            answers={questions[number].answers}\n            callback={checkAnswer}\n            userAnswer={userAnswers[number]}\n            questionNumber={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n          />\n        )}\n        {userAnswers.length >= TOTAL_QUESTIONS && !complete && !loading && (\n          <button className=\"results\" onClick={seeResults}>\n            See Results\n          </button>\n        )}\n        {!complete &&\n          !loading &&\n          userAnswers.length >= number + 1 &&\n          number < TOTAL_QUESTIONS - 1 && (\n            <button className=\"next\" onClick={nextQuestion}>\n              Next Question\n            </button>\n          )}\n      </div>\n      <p id=\"footer\">\n        This website uses cookies.{\" \"}\n        <a\n          href=\"https://github.com/thebitspud/big-brain-quiz\"\n          rel=\"noreferrer\"\n          target=\"_blank\"\n        >\n          Made by Thebitspud (2021).\n        </a>\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { CookiesProvider } from \"react-cookie\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CookiesProvider>\n      <App />\n    </CookiesProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}