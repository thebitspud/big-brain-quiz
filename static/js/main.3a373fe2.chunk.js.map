{"version":3,"sources":["components/QuestionCard.tsx","scripts/fetchApi.ts","scripts/utils.ts","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["QuestionCard","Difficulty","QuestionType","Categories","props","getBackgroundColor","answer","userAnswer","correctAnswer","className","questionNumber","totalQuestions","dangerouslySetInnerHTML","__html","question","answers","map","disabled","undefined","value","onClick","callback","style","backgroundColor","shuffleArray","target","i","length","j","Math","floor","random","fetchQuestions","amount","category","type","a","endpoint","fetch","json","data","console","log","results","correct_answer","incorrect_answers","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","complete","setComplete","startTrivia","SCIENCE","MULTIPLE","newQuestions","e","currentTarget","correct","userAnswerObject","TOTAL_QUESTIONS","next","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a373fe2.chunk.js","sourcesContent":["import React from \"react\";\nimport CardProps from \"../types/CardProps\";\n\nfunction QuestionCard(props: CardProps) {\n  const getBackgroundColor = (answer: string) => {\n    if (answer === props.userAnswer?.correctAnswer) return \"palegreen\";\n    else if (answer === props.userAnswer?.answer) return \"lightcoral\";\n    else return \"white\";\n  };\n\n  // noinspection SpellCheckingInspection\n  return (\n    <div className=\"QuestionCard\">\n      <p className=\"number\">\n        Question {props.questionNumber} of {props.totalQuestions}\n      </p>\n\n      <p\n        className=\"question\"\n        dangerouslySetInnerHTML={{ __html: props.question }}\n      />\n      <div className=\"answers\">\n        {props.answers.map((answer) => (\n          <div>\n            <button\n              disabled={props.userAnswer !== undefined}\n              value={answer}\n              onClick={props.callback}\n              style={{ backgroundColor: getBackgroundColor(answer) }}\n            >\n              <span dangerouslySetInnerHTML={{ __html: answer }} />\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default QuestionCard;\n","import { shuffleArray } from \"./utils\";\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\",\r\n}\r\n\r\nexport enum QuestionType {\r\n  MULTIPLE = \"multiple\",\r\n  TRUE_FALSE = \"boolean\",\r\n}\r\n\r\nexport enum Categories {\r\n  SCIENCE = 17,\r\n}\r\n\r\nexport type QueryQuestion = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport type QuestionFormat = QueryQuestion & { answers: string[] };\r\n\r\nexport const fetchQuestions = async (\r\n  amount: number,\r\n  category: Categories,\r\n  type: QuestionType\r\n) => {\r\n  const endpoint =\r\n    `https://opentdb.com/api.php?` +\r\n    `amount=${amount}` +\r\n    `&category=${category}` +\r\n    `&type=${type}`;\r\n\r\n  const data = await (await fetch(endpoint)).json();\r\n  console.log(data);\r\n  return data.results.map((question: QuestionFormat) => ({\r\n    ...question,\r\n    answers: shuffleArray([\r\n      question.correct_answer,\r\n      ...question.incorrect_answers,\r\n    ]),\r\n  }));\r\n};\r\n","export const shuffleArray = (target: any[]) => {\r\n  for (let i = target.length - 1; i > 0; i--) {\r\n    // Efficient ES6 random sort\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [target[i], target[j]] = [target[j], target[i]];\r\n  }\r\n\r\n  return target;\r\n};\r\n","import React, { useState } from \"react\";\nimport \"../styles/App.css\";\nimport \"./QuestionCard\";\nimport QuestionCard from \"./QuestionCard\";\nimport {\n  Categories,\n  fetchQuestions,\n  QuestionFormat,\n  QuestionType,\n} from \"../scripts/fetchApi\";\n\nconst TOTAL_QUESTIONS = 10;\n\nexport type UserAnswerObject = {\n  question: string;\n  answer: string;\n  correctAnswer: string;\n  correct: boolean;\n};\n\nfunction App() {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [questions, setQuestions] = useState<QuestionFormat[]>([]);\n  const [number, setNumber] = useState<number>(0);\n  const [userAnswers, setUserAnswers] = useState<UserAnswerObject[]>([]);\n  const [score, setScore] = useState<number>(0);\n  const [complete, setComplete] = useState<boolean>(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setComplete(false);\n\n    const newQuestions = await fetchQuestions(\n      TOTAL_QUESTIONS,\n      Categories.SCIENCE,\n      QuestionType.MULTIPLE\n    );\n\n    setQuestions(newQuestions);\n    setUserAnswers([]);\n    setLoading(false);\n    setScore(0);\n    setNumber(0);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (complete) return;\n\n    const answer = e.currentTarget.value;\n    const correctAnswer = questions[number].correct_answer;\n    const correct = answer === correctAnswer;\n    if (correct) setScore(score + 1);\n\n    const userAnswerObject = {\n      question: questions[number].question,\n      answer,\n      correctAnswer,\n      correct,\n    };\n\n    setUserAnswers([...userAnswers, userAnswerObject]);\n  };\n\n  const nextQuestion = () => {\n    const next = number + 1;\n    if (next >= TOTAL_QUESTIONS) setComplete(true);\n    else setNumber(next);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Big Brain Quiz &#129504;</h1>\n      <div className=\"info-card\">\n        {complete ? (\n          <button className=\"start\" onClick={startTrivia}>\n            Start\n          </button>\n        ) : null}\n        {!complete ? (\n          <p className=\"score\">\n            Score: {score} / {userAnswers.length}\n          </p>\n        ) : null}\n        {loading ? <p className=\"loading\">Loading Questions...</p> : null}\n        {!loading && !complete ? (\n          <QuestionCard\n            question={questions[number].question}\n            answers={questions[number].answers}\n            callback={checkAnswer}\n            userAnswer={userAnswers[number]}\n            questionNumber={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n          />\n        ) : null}\n        {userAnswers.length >= TOTAL_QUESTIONS && !loading ? (\n          <button className=\"restart\" onClick={startTrivia}>\n            Try Again\n          </button>\n        ) : null}\n        {!complete &&\n        !loading &&\n        userAnswers.length >= number + 1 &&\n        number < TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}